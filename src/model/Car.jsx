/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 car.glb --transform 
Files: car.glb [2.2MB] > car-transformed.glb [396.29KB] (82%)
Author: Muhammad Seno Aji (https://sketchfab.com/senoaji)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/young-dominic-toretto-cars-d0783bdf2ce347ebb5e77ff74eb50cd9
Title: Young Dominic Toretto Cars
*/

import React, { useLayoutEffect, useRef } from "react"
import { useGLTF } from "@react-three/drei"
import { applyProps } from "@react-three/fiber"
import * as THREE from "three"

export function Car(props) {
  const { nodes, materials, scene } = useGLTF("/car-transformed.glb")

  useLayoutEffect(() => {
    Object.values(nodes).forEach(
      (node) => node.isMesh && (node.receiveShadow = node.castShadow = true)
    )

    applyProps(materials.lamp, {
      // emissive: "#fff",
      emissiveIntensity: 3,
      toneMapped: false,
    })

    applyProps(materials.PaletteMaterial001, {
      color: "#9F2B68",
    })

    //car body
    applyProps(materials.PaletteMaterial002, {
      roughness: 0.3,
      metalness: 0.05,
      color: "#DE3163",
      envMapIntensity: 0.75,
      clearcoatRoughness: 0,
      clearcoat: 1,
    })

    // nodes.Object_41.material = new THREE.MeshPhysicalMaterial({
    //   roughness: 0.3,
    //   metalness: 0.05,
    //   color: "#FF69B4",
    //   envMapIntensity: 0.75,
    //   clearcoatRoughness: 0,
    //   clearcoat: 1,
    // })
  }, [nodes, materials])

  return (
    // <group {...props} dispose={null}>
    //   <primitive object={nodes._rootJoint} />
    //   <mesh
    //     castShadow
    //     geometry={nodes.BBK004_Disc_0.geometry}
    //     material={materials.PaletteMaterial001}
    //     position={[-0.477, 0.227, -0.764]}
    //     rotation={[0, -Math.PI / 2, 0]}
    //     scale={[0.112, 0.112, 0.164]}
    //   />
    //   <mesh
    //     castShadow
    //     geometry={nodes.Tire004_Tire_0.geometry}
    //     material={materials.Tire}
    //     position={[-0.493, 0.227, -0.765]}
    //     rotation={[Math.PI / 2, -Math.PI / 2, 0]}
    //     scale={[0.199, 0.199, 0.292]}
    //   />
    //   <skinnedMesh
    //     castShadow
    //     geometry={nodes.Object_41.geometry}
    //     material={materials.PaletteMaterial002}
    //     skeleton={nodes.Object_41.skeleton}
    //     position={[0, 0.421, -1.684]}
    //     rotation={[0.012, 0, 0]}
    //     scale={3.748}
    //   />
    //   <skinnedMesh
    //     castShadow
    //     geometry={nodes.Object_42.geometry}
    //     material={materials.PaletteMaterial001}
    //     skeleton={nodes.Object_42.skeleton}
    //     position={[0, 0.421, -1.684]}
    //     rotation={[0.012, 0, 0]}
    //     scale={3.748}
    //   />
    //   <skinnedMesh
    //     castShadow
    //     geometry={nodes.Object_43.geometry}
    //     material={materials.lamp}
    //     skeleton={nodes.Object_43.skeleton}
    //     position={[0, 0.421, -1.684]}
    //     rotation={[0.012, 0, 0]}
    //     scale={3.748}
    //   />
    //   <skinnedMesh
    //     castShadow
    //     geometry={nodes.Object_44.geometry}
    //     material={materials.PaletteMaterial001}
    //     skeleton={nodes.Object_44.skeleton}
    //     position={[0, 0.421, -1.684]}
    //     rotation={[0.012, 0, 0]}
    //     scale={3.748}
    //   />
    //   <skinnedMesh
    //     castShadow
    //     geometry={nodes.Object_45.geometry}
    //     material={materials.PaletteMaterial003}
    //     skeleton={nodes.Object_45.skeleton}
    //     position={[0, 0.421, -1.684]}
    //     rotation={[0.012, 0, 0]}
    //     scale={3.748}
    //   />
    //   <skinnedMesh
    //     castShadow
    //     geometry={nodes.Object_46.geometry}
    //     material={materials.PaletteMaterial003}
    //     skeleton={nodes.Object_46.skeleton}
    //     position={[0, 0.421, -1.684]}
    //     rotation={[0.012, 0, 0]}
    //     scale={3.748}
    //   />
    // </group>
    <primitive object={scene} {...props} />
  )
}

useGLTF.preload("/car-transformed.glb")
